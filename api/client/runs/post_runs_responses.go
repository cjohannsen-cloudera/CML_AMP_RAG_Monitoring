// Code generated by go-swagger; DO NOT EDIT.

package runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	lswagger "github.infra.cloudera.com/CAI/AmpRagMonitoring/pkg/swagger"

	strfmt "github.com/go-openapi/strfmt"

	"github.infra.cloudera.com/CAI/AmpRagMonitoring/models"
)

// PostRunsReader is a Reader for the PostRuns structure.
type PostRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRunsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRunsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostRunsOK creates a PostRunsOK with default headers values
func NewPostRunsOK() *PostRunsOK {
	return &PostRunsOK{}
}

/*
PostRunsOK handles this case with default header values.

success
*/
type PostRunsOK struct {
	Payload *models.ExperimentRun
}

// Code gets the status code for the post runs o k response
func (o *PostRunsOK) Code() int {
	return 200
}

func (o *PostRunsOK) Error() string {
	return fmt.Sprintf("[POST /runs][%d] postRunsOK  %+v", 200, o.Payload)
}

func (o *PostRunsOK) GetPayload() *models.ExperimentRun {
	return o.Payload
}

func (o *PostRunsOK) GetSerializedPayload() ([]byte, error) {
	return json.Marshal(o.Payload)
}

var _ lswagger.SwaggerResponse = &PostRunsOK{}

func (o *PostRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExperimentRun)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRunsBadRequest creates a PostRunsBadRequest with default headers values
func NewPostRunsBadRequest() *PostRunsBadRequest {
	return &PostRunsBadRequest{}
}

/*
PostRunsBadRequest handles this case with default header values.

bad request
*/
type PostRunsBadRequest struct {
}

// Code gets the status code for the post runs bad request response
func (o *PostRunsBadRequest) Code() int {
	return 400
}

func (o *PostRunsBadRequest) Error() string {
	return fmt.Sprintf("[POST /runs][%d] postRunsBadRequest ", 400)
}

func (o *PostRunsBadRequest) GetSerializedPayload() ([]byte, error) {
	return nil, nil
}

var _ lswagger.SwaggerResponse = &PostRunsBadRequest{}

func (o *PostRunsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRunsInternalServerError creates a PostRunsInternalServerError with default headers values
func NewPostRunsInternalServerError() *PostRunsInternalServerError {
	return &PostRunsInternalServerError{}
}

/*
PostRunsInternalServerError handles this case with default header values.

internal service error
*/
type PostRunsInternalServerError struct {
}

// Code gets the status code for the post runs internal server error response
func (o *PostRunsInternalServerError) Code() int {
	return 500
}

func (o *PostRunsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /runs][%d] postRunsInternalServerError ", 500)
}

func (o *PostRunsInternalServerError) GetSerializedPayload() ([]byte, error) {
	return nil, nil
}

var _ lswagger.SwaggerResponse = &PostRunsInternalServerError{}

func (o *PostRunsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
