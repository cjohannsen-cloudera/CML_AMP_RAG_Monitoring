// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	lswagger "github.infra.cloudera.com/CAI/AmpRagMonitoring/pkg/swagger"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the experiments client
type API interface {
	/*
	   GetExperiments fetches the list of monitored experiments
	   Fetch the list of monitored experiments
	*/
	GetExperiments(ctx context.Context, params *GetExperimentsParams) (*GetExperimentsOK, error)
}

// New creates a new experiments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for experiments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetExperiments fetches the list of monitored experiments

Fetch the list of monitored experiments
*/
func (a *Client) GetExperiments(ctx context.Context, params *GetExperimentsParams) (*GetExperimentsOK, error) {

	operation := &runtime.ClientOperation{
		ID:                 "GetExperiments",
		Method:             "GET",
		PathPattern:        "/experiments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExperimentsReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	}
	result, err := a.transport.Submit(operation)
	if err != nil {
		// Make sure to convert back to an error type so that nil comparisons work as expected
		var richError error
		richError, err = lswagger.NewRichError(operation, err)
		if err == nil {
			err = richError
		}
		return nil, err
	}
	return result.(*GetExperimentsOK), nil

}
