// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostMetricsListHandlerFunc turns a function with the right signature into a post metrics list handler
type PostMetricsListHandlerFunc func(PostMetricsListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostMetricsListHandlerFunc) Handle(params PostMetricsListParams) middleware.Responder {
	return fn(params)
}

// PostMetricsListHandler interface for that can handle valid post metrics list params
type PostMetricsListHandler interface {
	Handle(PostMetricsListParams) middleware.Responder
}

// NewPostMetricsList creates a new http.Handler for the post metrics list operation
func NewPostMetricsList(ctx *middleware.Context, handler PostMetricsListHandler) *PostMetricsList {
	return &PostMetricsList{Context: ctx, Handler: handler}
}

/*
	PostMetricsList swagger:route POST /metrics/list metrics postMetricsList

List metrics.

List monitoring metrics
*/
type PostMetricsList struct {
	Context *middleware.Context
	Handler PostMetricsListHandler
}

func (o *PostMetricsList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostMetricsListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
