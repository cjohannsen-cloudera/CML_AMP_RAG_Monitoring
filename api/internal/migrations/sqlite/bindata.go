package sqlite

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_mutex_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xc8\x2d\x2d\x49\xad\x48\xb0\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\xe6\x02\x04\x00\x00\xff\xff\x49\xa9\x23\xc3\x47\x00\x00\x00")

func _1_mutex_down_sql() ([]byte, error) {
	return bindata_read(
		__1_mutex_down_sql,
		"1_mutex.down.sql",
	)
}

var __1_mutex_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcb\x31\x0e\xc2\x40\x0c\x44\xd1\x7e\x4f\x31\x65\xb6\xa4\xce\x65\xbc\xa0\x41\xb2\x70\x1c\x64\x7b\x51\x72\x7b\x04\x45\xea\xff\xdf\x23\x38\x8a\xa8\x71\x37\x42\x9f\xf0\xbd\xc0\x43\xb3\x12\xb2\xcd\xe2\x21\x4b\x03\x00\x51\x81\x7a\xfd\xbb\x4f\x33\xbc\x43\xb7\x11\x27\x5e\x3c\x5b\x5f\x9b\x7a\x32\xea\xb7\xec\x17\x14\x95\x8e\xcf\xb0\xc9\xc4\x72\xeb\x6b\xfb\x06\x00\x00\xff\xff\xcd\xac\x43\xe3\x6d\x00\x00\x00")

func _1_mutex_up_sql() ([]byte, error) {
	return bindata_read(
		__1_mutex_up_sql,
		"1_mutex.up.sql",
	)
}

var __2_experiment_runs_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x89\x2f\x2a\xcd\x2b\x4e\xb0\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xcd\x8f\x33\x69\x50\x00\x00\x00")

func _2_experiment_runs_down_sql() ([]byte, error) {
	return bindata_read(
		__2_experiment_runs_down_sql,
		"2_experiment_runs.down.sql",
	)
}

var __2_experiment_runs_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x4e\x32\x31\x14\xc5\xf7\x3c\xc5\x59\x42\x32\x24\x7c\xeb\x6f\x55\xe0\xa2\x13\x87\x01\x4b\xc7\xc8\x8a\x56\xe6\x46\x1a\xc7\x82\x6d\x47\x7c\x7c\x83\x25\xc4\x3f\x0b\x89\x61\xdb\x73\xee\xef\xdc\xdc\x9e\x91\x24\xa1\x08\x4a\x0c\x0b\x42\x3e\x41\x39\x53\xa0\xfb\x7c\xa1\x16\xd0\xfc\xb6\x63\x6f\x9f\xd9\xc5\x95\x6f\x5d\xd0\xe8\x76\x00\x40\xdb\x5a\x23\x2f\x15\x5d\x91\xc4\x5c\xe6\x53\x21\x97\xb8\xa1\x65\x96\xd4\x4f\x53\x07\xe3\x9d\x90\xa3\x6b\x21\xbb\xff\x06\x83\xde\x07\xbd\xac\x8a\xe2\x68\xf5\xad\xfb\xd5\xb3\xf6\x6c\x22\xd7\x1a\xc3\xd9\xac\x20\x51\x9e\x74\x8c\x69\x22\xaa\x42\x61\x62\x9a\xc0\x19\xfa\x7d\x04\xf3\xca\x88\x1b\x1b\x10\xb6\x88\x1b\x13\xb1\x67\xac\x8d\xc3\x93\xdb\xee\xd3\x83\x41\x02\xc2\x06\x78\x7e\x69\x39\x44\xae\xf1\xd0\x46\x84\x68\x9b\x06\xd6\x61\xe7\xb7\x8f\x9e\x43\x48\xf9\xed\xae\xbe\x68\xbe\x43\x22\x9e\xbd\x40\xcd\x0d\x5f\xf4\x00\x09\x78\x76\xfe\xf1\x03\x56\x31\x68\x8c\x85\x22\x95\x4f\xe9\xe7\x0e\xa3\x4a\x4a\x2a\xd5\xea\xa0\x2e\x94\x98\xce\xb3\x2f\xe7\xfb\xdb\x74\x55\xe6\xb7\x15\x75\xbf\x55\x2a\x3b\x15\xa7\xd7\xe9\xfd\xef\xbc\x07\x00\x00\xff\xff\x87\x23\x65\x7d\xc2\x02\x00\x00")

func _2_experiment_runs_up_sql() ([]byte, error) {
	return bindata_read(
		__2_experiment_runs_up_sql,
		"2_experiment_runs.up.sql",
	)
}

var __3_metrics_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xc8\x4d\x2d\x29\xca\x4c\x2e\x4e\xb0\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xce\x53\xcd\x44\x48\x00\x00\x00")

func _3_metrics_down_sql() ([]byte, error) {
	return bindata_read(
		__3_metrics_down_sql,
		"3_metrics.down.sql",
	)
}

var __3_metrics_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcc\xbd\x4e\x85\x40\x10\xc5\xf1\x9e\xa7\x38\x25\x24\x16\x58\x5b\x8d\x30\xe8\xc6\x65\x25\xc3\x60\xa0\x62\x89\x6e\x0c\x89\x10\xc3\x87\xf1\xf1\x0d\x7e\x15\xb7\xb8\xb7\x3d\xff\x5f\x4e\x26\x4c\xca\x50\xba\xb5\x0c\x53\xc0\x3d\x2a\xb8\x35\xb5\xd6\xf0\x53\xd8\x96\xf1\x79\xf5\x88\x23\x00\xf0\xe3\x8b\x87\x71\xca\x77\x2c\xa8\xc4\x94\x24\x1d\x1e\xb8\xbb\xfa\xa9\xe1\xf3\x3d\x2c\xe3\x14\xe6\xad\x3f\xe0\x13\x49\x76\x4f\x12\x5f\xa7\x69\xf2\xfd\xea\x1a\x6b\x7f\xe9\xb2\xcf\x17\xcd\x3c\x4c\xe1\xbc\xf8\x18\xde\xf6\xe0\x21\x4c\xf6\x34\x6d\xc3\xeb\xea\xa1\xdc\xea\xdf\xb0\x7a\xe4\xa4\xac\xa6\xe4\x7f\x8c\x9c\x0b\x6a\xac\x22\x6b\x44\xd8\x69\x7f\xd4\x5a\xa9\xac\xa2\xe4\x26\xfa\x0a\x00\x00\xff\xff\x3e\xe6\x59\xa9\x1a\x01\x00\x00")

func _3_metrics_up_sql() ([]byte, error) {
	return bindata_read(
		__3_metrics_up_sql,
		"3_metrics.up.sql",
	)
}

var __4_metrics_value_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xa4\x10\xe3\xef\x27\x00\x00\x00")

func _4_metrics_value_down_sql() ([]byte, error) {
	return bindata_read(
		__4_metrics_value_down_sql,
		"4_metrics_value.down.sql",
	)
}

var __4_metrics_value_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xc8\x4d\x2d\x29\xca\x4c\x2e\x4e\x50\x08\x72\xf5\x73\xf4\x75\x55\x70\xf6\xf7\x09\xf5\xf5\x53\x48\x28\x4b\xcc\x29\x4d\x4d\x50\x08\xf1\x87\x32\xe3\xf3\x4a\x73\x53\x8b\x32\x93\x13\xac\xb9\xb0\xeb\x77\x74\x71\x41\xd5\x1c\x5f\x92\x5a\x51\x92\xa0\x10\xe2\x1a\x11\x62\xcd\x05\x08\x00\x00\xff\xff\x88\x30\x3d\x8a\x74\x00\x00\x00")

func _4_metrics_value_up_sql() ([]byte, error) {
	return bindata_read(
		__4_metrics_value_up_sql,
		"4_metrics_value.up.sql",
	)
}

var __5_metrics_value_numeric_nullable_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xa4\x10\xe3\xef\x27\x00\x00\x00")

func _5_metrics_value_numeric_nullable_down_sql() ([]byte, error) {
	return bindata_read(
		__5_metrics_value_numeric_nullable_down_sql,
		"5_metrics_value_numeric_nullable.down.sql",
	)
}

var __5_metrics_value_numeric_nullable_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xc8\x4d\x2d\x29\xca\x4c\x2e\x4e\x50\x08\x72\xf5\x73\xf4\x75\x55\x70\xf6\xf7\x09\xf5\xf5\x53\x48\x28\x4b\xcc\x29\x4d\x8d\xcf\x2b\xcd\x4d\x2d\xca\x4c\x4e\x50\x08\xf1\x47\x13\x8a\xcf\xcb\xcf\x8b\xcf\x2b\xcd\xc9\x49\x4c\xca\x49\x4d\xb0\xe6\xc2\x6e\xa8\xa3\x8b\x0b\x2e\x13\x83\x5c\x1d\x7d\xac\xb9\x42\x03\x5c\x1c\x43\x90\x75\x04\xbb\x86\x60\x28\xb5\x25\xcb\x6e\x97\x20\xff\x00\xec\x96\xa3\xeb\x07\x04\x00\x00\xff\xff\x5b\x01\x32\x03\x11\x01\x00\x00")

func _5_metrics_value_numeric_nullable_up_sql() ([]byte, error) {
	return bindata_read(
		__5_metrics_value_numeric_nullable_up_sql,
		"5_metrics_value_numeric_nullable.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_mutex.down.sql":                          _1_mutex_down_sql,
	"1_mutex.up.sql":                            _1_mutex_up_sql,
	"2_experiment_runs.down.sql":                _2_experiment_runs_down_sql,
	"2_experiment_runs.up.sql":                  _2_experiment_runs_up_sql,
	"3_metrics.down.sql":                        _3_metrics_down_sql,
	"3_metrics.up.sql":                          _3_metrics_up_sql,
	"4_metrics_value.down.sql":                  _4_metrics_value_down_sql,
	"4_metrics_value.up.sql":                    _4_metrics_value_up_sql,
	"5_metrics_value_numeric_nullable.down.sql": _5_metrics_value_numeric_nullable_down_sql,
	"5_metrics_value_numeric_nullable.up.sql":   _5_metrics_value_numeric_nullable_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_mutex.down.sql":                          &_bintree_t{_1_mutex_down_sql, map[string]*_bintree_t{}},
	"1_mutex.up.sql":                            &_bintree_t{_1_mutex_up_sql, map[string]*_bintree_t{}},
	"2_experiment_runs.down.sql":                &_bintree_t{_2_experiment_runs_down_sql, map[string]*_bintree_t{}},
	"2_experiment_runs.up.sql":                  &_bintree_t{_2_experiment_runs_up_sql, map[string]*_bintree_t{}},
	"3_metrics.down.sql":                        &_bintree_t{_3_metrics_down_sql, map[string]*_bintree_t{}},
	"3_metrics.up.sql":                          &_bintree_t{_3_metrics_up_sql, map[string]*_bintree_t{}},
	"4_metrics_value.down.sql":                  &_bintree_t{_4_metrics_value_down_sql, map[string]*_bintree_t{}},
	"4_metrics_value.up.sql":                    &_bintree_t{_4_metrics_value_up_sql, map[string]*_bintree_t{}},
	"5_metrics_value_numeric_nullable.down.sql": &_bintree_t{_5_metrics_value_numeric_nullable_down_sql, map[string]*_bintree_t{}},
	"5_metrics_value_numeric_nullable.up.sql":   &_bintree_t{_5_metrics_value_numeric_nullable_up_sql, map[string]*_bintree_t{}},
}}
